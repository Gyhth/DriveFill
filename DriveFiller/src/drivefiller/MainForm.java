/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package drivefiller;


import javax.swing.JComboBox;
import java.io.File;
import java.io.FileWriter;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;

/**
 *
 * @author Owner
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        populateDrives();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        lblDrives = new javax.swing.JLabel();
        cbDrives = new javax.swing.JComboBox();
        lblDriveSizeMax = new javax.swing.JLabel();
        lblUsedSpace = new javax.swing.JLabel();
        lblFreeSpace = new javax.swing.JLabel();
        lblPercentFree = new javax.swing.JLabel();
        txtDriveSize = new javax.swing.JTextField();
        txtUsedSpace = new javax.swing.JTextField();
        txtFreeSpace = new javax.swing.JTextField();
        txtPercentFreeSpace = new javax.swing.JTextField();
        btnFillAndWipe = new javax.swing.JButton();

        jScrollPane2.setViewportView(jTextPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDrives.setText("Drive:");
        lblDrives.setName("lblDrive"); // NOI18N

        cbDrives.setMaximumRowCount(20);
        cbDrives.setName("cbDrives"); // NOI18N
        cbDrives.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDrivesActionPerformed(evt);
            }
        });

        lblDriveSizeMax.setText("Drive Size:");

        lblUsedSpace.setText("Used Space:");

        lblFreeSpace.setText("Free Space:");

        lblPercentFree.setText("Percent Free:");

        txtDriveSize.setEditable(false);

        txtUsedSpace.setEditable(false);

        txtFreeSpace.setEditable(false);

        txtPercentFreeSpace.setEditable(false);

        btnFillAndWipe.setText("Fill and Wipe");
        btnFillAndWipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFillAndWipeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblPercentFree)
                            .addComponent(lblDrives)
                            .addComponent(lblFreeSpace)
                            .addComponent(lblDriveSizeMax)
                            .addComponent(lblUsedSpace))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbDrives, 0, 166, Short.MAX_VALUE)
                            .addComponent(txtDriveSize)
                            .addComponent(txtUsedSpace)
                            .addComponent(txtFreeSpace)
                            .addComponent(txtPercentFreeSpace)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(btnFillAndWipe)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDrives)
                    .addComponent(cbDrives, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDriveSizeMax)
                    .addComponent(txtDriveSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsedSpace)
                    .addComponent(txtUsedSpace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFreeSpace)
                    .addComponent(txtFreeSpace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPercentFree)
                    .addComponent(txtPercentFreeSpace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnFillAndWipe)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblDriveSizeMax.getAccessibleContext().setAccessibleName("lblDriveSize");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbDrivesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDrivesActionPerformed
        JComboBox drives = (JComboBox)evt.getSource();
        String selectedDriveString = drives.getSelectedItem().toString();
        File selectedDrive = new File(selectedDriveString);
        updateDriveInformation(selectedDrive);
    }//GEN-LAST:event_cbDrivesActionPerformed

    private void btnFillAndWipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFillAndWipeActionPerformed
        final String confirmString = "Are you sure you wish to fill this drive?";
        int dialogResult = JOptionPane.showConfirmDialog(this, confirmString, "Confirm Fill and Wipe", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (dialogResult == JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(this, "You Accepted");
            writeFilesToDrive(cbDrives.getSelectedItem().toString());
        }
    }//GEN-LAST:event_btnFillAndWipeActionPerformed

    private void writeFilesToDrive(String drive) {
        final int MAX_FILESIZE = 10000000;
        File driveWritingTo = new File(drive);
        new Thread(){
                public void run() {
                    Integer fileNumber = 1;
                    File writingFile = new File(drive+fileNumber+".txt");                    
                    try {   
                        FileWriter fw = new FileWriter(writingFile.getAbsoluteFile());
                        while (driveWritingTo.getFreeSpace() < driveWritingTo.getTotalSpace()) {
                            while (writingFile.length() < MAX_FILESIZE) {
                                fw.append("1");
                            }
                            fileNumber++;
                            writingFile = new File(drive+fileNumber+".txt");
                            fw = new FileWriter(writingFile.getAbsoluteFile());
                        }
                    }
                    catch (Exception e) {        
                    }
                }
        }.start();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });       
    }
    
    private void populateDrives() {
        File[] drives = File.listRoots();      
        for(File drive : drives) {
            cbDrives.addItem(drive.getPath());
        }
    }
    
    private void updateDriveInformation(File drive) {
        JTextField driveSize = txtDriveSize;
        JTextField driveUsedSpace = txtUsedSpace;
        JTextField driveFreeSpace = txtFreeSpace;
        JTextField drivePercentFree = txtPercentFreeSpace;
        Long ttlDriveSizeInBytes = drive.getTotalSpace();
        Long ttlDriveSpaceUsedInBytes = drive.getTotalSpace()-drive.getFreeSpace();
        Long ttlDriveSpaceFreeInBytes = drive.getFreeSpace();
        String ttlDriveSize = calculateByteSize(ttlDriveSizeInBytes);
        String ttlDriveSpaceUsed = calculateByteSize(ttlDriveSpaceUsedInBytes);
        String ttlDriveSpaceFree = calculateByteSize(ttlDriveSpaceFreeInBytes);
        String ttlDriveSpaceFreePercent = (Math.round(((ttlDriveSpaceFreeInBytes.doubleValue()/ttlDriveSizeInBytes.doubleValue())*100)*100)/100.00) + "%";
        driveSize.setText(ttlDriveSize);
        driveUsedSpace.setText(ttlDriveSpaceUsed);
        driveFreeSpace.setText(ttlDriveSpaceFree);
        drivePercentFree.setText(ttlDriveSpaceFreePercent);
        
    }
    
    private String calculateByteSize(Long driveSize) {
        //Start with an invalid Index, so we have something to pass back if something is wrong.
        Integer index = -1;
        //The array listing all the orders of file sizes, in order.
        //Note: Calculated values are in the base 2, therefore the proper wording is KiB, MiB, etc.
        //KB, MB, GB are used when referring to the base 10, which Storage Manufacturers use.  
        String[] sizes = {"Bytes", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"};
        //Initalize a temporary variable to hold our calculated values
        Double tmpFileSizeInBytes = driveSize.doubleValue();
        //If the file size is less than the needed threshold to get up to even Kilibytes, we know
        //The file is only bytes large, and so we use the first index to describe the size.
        if (driveSize < 1024) {
            index = 0;
        }
        //While our file size exceeds 1024, meaning it can go to the next file size
        while (tmpFileSizeInBytes > 1024) {
            index++;
            //We calculate the new Integer to represent the file size threshold. 
            //For example, 2^10 is needed to get from Bytes to Kilibytes,
            //2^20 is the number of bytes in a Mebibyte, etc.
            Double bytesInSize = Math.pow(2,(10*index));
            //Taking the number of bytes passed to us, we divide it by the number
            //Of bytes at our present threshold, and put that into a new variable. 
            tmpFileSizeInBytes = driveSize.doubleValue()/bytesInSize;         
        }
        //Return the file size we've calculated the number to be, and the file size descriptor.
        //It's presently determined down to 2 decimal places, as that's the Windows Standard.
        return Math.round(tmpFileSizeInBytes*100)/100.00 + sizes[index];
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFillAndWipe;
    private javax.swing.JComboBox cbDrives;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel lblDriveSizeMax;
    private javax.swing.JLabel lblDrives;
    private javax.swing.JLabel lblFreeSpace;
    private javax.swing.JLabel lblPercentFree;
    private javax.swing.JLabel lblUsedSpace;
    private javax.swing.JTextField txtDriveSize;
    private javax.swing.JTextField txtFreeSpace;
    private javax.swing.JTextField txtPercentFreeSpace;
    private javax.swing.JTextField txtUsedSpace;
    // End of variables declaration//GEN-END:variables
}
